import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, classification_report
from sklearn.preprocessing import StandardScaler, LabelEncoder
import matplotlib.pyplot as plt
import seaborn as sns

# 1. Data Generation and Loading
print("--- Generating and Loading Synthetic Data ---")
# Create a simple synthetic dataset for customer churn
data = {
    'age': np.random.randint(20, 70, 100),
    'subscription_length_months': np.random.randint(1, 60, 100),
    'service_calls': np.random.randint(0, 5, 100),
    'monthly_bill': np.random.randint(20, 150, 100),
    'churn': np.random.choice([0, 1], 100, p=[0.7, 0.3]) # 0=No Churn, 1=Churn
}
df = pd.DataFrame(data)

print(df.head())
print("\n")

# 2. Exploratory Data Analysis and Visualization
print("--- Exploratory Data Analysis ---")
print(df.info())
print("\n")

# Visualize the distribution of churn
plt.figure(figsize=(6, 4))
sns.countplot(x='churn', data=df)
plt.title('Distribution of Customer Churn')
plt.xticks(ticks=[0, 1], labels=['No Churn', 'Churn'])
plt.show()

# Visualize the relationship between monthly bill and churn
plt.figure(figsize=(10, 6))
sns.boxplot(x='churn', y='monthly_bill', data=df)
plt.title('Monthly Bill vs. Churn')
plt.xticks(ticks=[0, 1], labels=['No Churn', 'Churn'])
plt.show()

# 3. Data Preprocessing
print("--- Data Preprocessing ---")

# Separate features (X) and target (y)
X = df.drop('churn', axis=1)
y = df['churn']

# Scale numerical features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)
print(f"Training set size: {X_train.shape[0]}")
print(f"Testing set size: {X_test.shape[0]}")
print("\n")

# 4. Building and Training the Model
print("--- Building and Training a Decision Tree Model ---")
# Initialize the Decision Tree Classifier
model = DecisionTreeClassifier(random_state=42)

# Train the model on the training data
model.fit(X_train, y_train)
print("Model training complete.")
print("\n")

# 5. Prediction and Evaluation
print("--- Model Prediction and Evaluation ---")

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model's performance
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy of the model: {accuracy:.2f}")

# Display a detailed classification report
print("\nClassification Report:")
print(classification_report(y_test, y_pred))

# A simple prediction example
new_customer_data = np.array([[35, 12, 1, 85]])  # Age, sub length, service calls, monthly bill
new_customer_data_scaled = scaler.transform(new_customer_data)
prediction = model.predict(new_customer_data_scaled)
prediction_label = "Churn" if prediction[0] == 1 else "No Churn"
print(f"\nPrediction for new customer with data {new_customer_data[0]}: {prediction_label}")